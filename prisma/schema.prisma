// prisma/schema.prisma
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

enum UserRole {
  ADMIN
  USER
  VENDOR
}

model User {
  id                      String                 @id @default(auto()) @map("_id") @db.ObjectId
  name                    String?
  email                   String                 @unique
  emailVerified           DateTime?
  companyName             String?
  panNo                   Int?                   @unique
  image                   String?
  password                String?
  role                    UserRole               @default(USER)
  accounts                Account[]
  isTwoFactorEnabled      Boolean                @default(false)
  twoFactorConfirmation   TwoFactorConfirmation?
  twoFactorConfirmationId String?                @db.ObjectId
  Review                  Review[]
  CartItem                CartItem[]
  ShippingAdress          ShippingAdress[]
  createdAt               DateTime               @default(now())
  updatedAt               DateTime               @updatedAt
  Order                   Order?
}

model Account {
  id                String  @id @default(auto()) @map("_id") @db.ObjectId
  userId            String  @db.ObjectId
  vendorId          String  @db.ObjectId
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.String
  access_token      String? @db.String
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.String
  session_state     String?

  user User? @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model VerificationToken {
  id      String   @id @default(auto()) @map("_id") @db.ObjectId
  email   String
  token   String   @unique
  expires DateTime

  @@unique([email, token])
}

model PasswordResetToken {
  id      String   @id @default(auto()) @map("_id") @db.ObjectId
  email   String
  token   String   @unique
  expires DateTime

  @@unique([email, token])
}

model TwoFactorToken {
  id      String   @id @default(auto()) @map("_id") @db.ObjectId
  email   String
  token   String   @unique
  expires DateTime

  @@unique([email, token])
}

model TwoFactorConfirmation {
  id String @id @default(auto()) @map("_id") @db.ObjectId

  userId String @db.ObjectId
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId])
}

model Product {
  id            String          @id @default(auto()) @map("_id") @db.ObjectId
  name          String
  description   String
  brand         String?
  slug          String          @unique
  category      Category        @relation(fields: [categoryId], references: [id])
  categoryId    String          @db.ObjectId
  subCategories SubCategory[]
  details       ProductDetail[]
  questions     Question[]
  reviews       Review[]
  refundPolicy  String?         @default("30 days")
  rating        Float           @default(0)
  numReviews    Int             @default(0)
  shipping      Float
  subProducts   SubProduct[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  Order     Order[]
}

model SubProduct {
  id                 String     @id @default(auto()) @map("_id") @db.ObjectId
  sku                String
  images             Image[]    @relation(name: "SubProductImages")
  description_images Image[]    @relation(name: "DescriptionImages")
  color              Style      @relation(fields: [styleId], references: [id])
  sizes              Size[]
  discount           Float      @default(0)
  sold               Int        @default(0)
  product            Product    @relation(fields: [productId], references: [id])
  productId          String     @db.ObjectId
  styleId            String     @db.ObjectId
  cartItem           CartItem[]
}

model Category {
  id   String @id @default(auto()) @map("_id") @db.ObjectId
  name String
  slug String

  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
  Product     Product[]
  SubCategory SubCategory[]
}

model SubCategory {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  name       String
  slug       String
  category   Category @relation(fields: [categoryId], references: [id])
  categoryId String   @db.ObjectId

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  Product   Product? @relation(fields: [productId], references: [id])
  productId String?  @db.ObjectId
}

model Size {
  id           String      @id @default(auto()) @map("_id") @db.ObjectId
  size         String
  qty          Int
  price        Float
  SubProduct   SubProduct? @relation(fields: [subProductId], references: [id])
  subProductId String?     @db.ObjectId
}

model ProductDetail {
  id        String  @id @default(auto()) @map("_id") @db.ObjectId
  name      String
  value     String
  Product   Product @relation(fields: [productId], references: [id])
  productId String  @db.ObjectId
}

model Question {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  question  String
  answer    String
  Product   Product? @relation(fields: [productId], references: [id])
  productId String?  @db.ObjectId
}

model Review {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  reviewBy   User     @relation(fields: [reviewById], references: [id])
  reviewById String   @db.ObjectId
  rating     Int      @default(0)
  review     String
  size       String?
  style      Style?   @relation(fields: [styleId], references: [id])
  styleId    String   @db.ObjectId
  fit        String
  images     Image[]
  likes      Like[]
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  Product    Product? @relation(fields: [productId], references: [id])
  productId  String?  @db.ObjectId
}

model Image {
  id                      String      @id @default(auto()) @map("_id") @db.ObjectId
  url                     String
  public_url              String
  subProduct              SubProduct? @relation(fields: [subProductId], references: [id], name: "SubProductImages")
  subProductId            String?     @db.ObjectId
  review                  Review?     @relation(fields: [reviewId], references: [id])
  reviewId                String?     @db.ObjectId
  descriptionSubProduct   SubProduct? @relation(fields: [descriptionSubProductId], references: [id], name: "DescriptionImages")
  descriptionSubProductId String?     @db.ObjectId
}

model Style {
  id         String       @id @default(auto()) @map("_id") @db.ObjectId
  color      String
  image      String
  SubProduct SubProduct[]
  Review     Review[]
}

model Like {
  id       String  @id @default(auto()) @map("_id") @db.ObjectId
  likes    String
  Review   Review? @relation(fields: [reviewId], references: [id])
  reviewId String? @db.ObjectId
}

model CartItem {
  id           String     @id @default(auto()) @map("_id") @db.ObjectId
  user         User?      @relation(fields: [userId], references: [id])
  userId       String?    @db.ObjectId
  subProduct   SubProduct @relation(fields: [subProductId], references: [id])
  subProductId String     @db.ObjectId
  quantity     Int
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt

  @@unique([userId, subProductId])
}

model ShippingAdress {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  user      User?    @relation(fields: [userId], references: [id])
  userId    String?  @unique @db.ObjectId
  name      String
  email     String
  phone     String
  state     String
  city      String
  address   String
  street    String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  Order     Order[]
}

enum PaymentMethod {
  CASHONDELIVERY
  KHALTI
}

enum Status {
  INITIATED
  PENDING
  COMPLETED
  REFUNDED
  EXPIRED
  CANCELED
}

model Order {
  id                  String         @id @default(auto()) @map("_id") @db.ObjectId
  user                User?          @relation(fields: [userId], references: [id])
  userId              String?        @unique @db.ObjectId
  product             Product        @relation(fields: [productId], references: [id])
  productId           String         @db.ObjectId
  shippingAddress     ShippingAdress @relation(fields: [shippingAddressId], references: [id])
  shippingAddressId   String         @db.ObjectId
  paymentMethod       PaymentMethod
  status              Status
  total               String
  totalBeforeDiscount String
  coupenApplied       String
  shippingPrice       String
  taxPrice            String
  paidAt              DateTime
  deliveredAt         DateTime

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
